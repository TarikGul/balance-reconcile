import { ApiPromise, WsProvider } from "@polkadot/api";
import fs from "fs";
import { promisify } from "util";

const sleep = promisify(setTimeout);

import NaiveCrawler from "../classes/naive_crawler";
import { ReconcileInfo } from "../types/types";

/**
 * Subscribes to new blocks using @polkadot-js/api and execute a callback
 * with an array of `ReconcileInfos[]` that was generated by crawling the block.
 *
 * @param sidecarUrl base url that a sidecar instance exposes.
 * @param wsUrl web socket url for a substrate based node
 * @param callback function that will be called at each block with a
 * `ReconcileInfo[]` as a param.
 */
export async function subscribe(
  sidecarUrl: string,
  wsUrl: string,
  callback: (infos: ReconcileInfo[]) => void
): Promise<void> {
  const crawler = new NaiveCrawler(sidecarUrl, wsUrl);

  const wsProvider = new WsProvider(wsUrl);
  const api = await ApiPromise.create({ provider: wsProvider });

  await api.rpc.chain.subscribeNewHeads(async ({ number }) => {
    // We need this because subscribeNewHeads gets the newest block long
    // before sidecar is aware of it.
    await sleep(1000);

    try {
      console.log(`Checking for block ${number.toString()}`);
      callback(await crawler.crawlBlock(number.toNumber()));
    } catch (e) {
      console.log(e);
    }
  });
}

/**
 * Example callback function for subscribe that will log ReconcileInfo objects
 * with a non-zero diff
 *
 * @param outputFileName name of the file to write log output to.
 * Will generate file if it does not exist, and append to file if it does exist.
 */
export const writeNonZeroDiffToFile = (outputFileName: string) => (
  infos: ReconcileInfo[]
): void => {
  // console.log just for demonstration
  console.log(infos);
  const diff = NaiveCrawler.warnWhenDiff(infos);
  diff.forEach((line) => {
    const withNewLine = `\n${line} `;

    fs.writeFileSync(outputFileName, withNewLine, {
      flag: "a+",
    });
  });

  if (diff.length) {
    fs.writeFileSync(outputFileName, "\n", {
      flag: "a+",
    });
  }
};

/**
 * Example showing how the above subscribe and logging callback can be used together.
 *
 * @param sidecarUrl base url that a sidecar instance exposes.
 * @param wsUrl web socket url for a substrate based node
 */
export async function exampleUseOfSubscribeWithLogging(
  sideCarUrl: string,
  wSUrl: string
): Promise<void> {
  const loggerCallBack = writeNonZeroDiffToFile("example_subscribe_log.txt");

  await subscribe(sideCarUrl, wSUrl, loggerCallBack);
}
